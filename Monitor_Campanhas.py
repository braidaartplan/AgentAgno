import os

from agno.agent import Agent
from agno.tools.tavily import TavilyTools
from agno.tools.sql import SQLTools
from agno.models.openai import OpenAIChat
from dotenv import load_dotenv
from agno.playground import Playground, serve_playground_app
from agno.storage.sqlite import SqliteStorage
from textwrap import dedent
from agno.memory.v2.memory import Memory
from agno.memory.v2.db.sqlite import SqliteMemoryDb


# Carrega as vari√°veis de ambiene com as chaves de API necess√°rias bem como as credenciais do banco de dados
load_dotenv('/Users/braida/Dev/Python/Stremlit/GitHub/AgentAgno/.env')

# Credenciais do banco de dados Artplan
db_url = f"mysql+pymysql://{os.getenv('DB_USUARIO')}:{os.getenv('DB_SENHA')}@{os.getenv('DB_HOST')}/{os.getenv('DB_NOME')}"

# Cria√ß√£o de banco de dados para armazenar conversas das sess√µes
db_file = "tmp/agent.db"
db_conversations = SqliteStorage(table_name="Sessoes_Agentes", db_file="tmp/agent.db")


# Cria√ß√£o de mem√≥ria para o agente. Esta fun√ß√£o cria um agente secund√°rio que gerencia a conversa com o usu√°rio, armazenando as principais informa√ß√µes
memory= Memory(
    model= OpenAIChat(id="gpt-4.1-mini"),
    db = SqliteMemoryDb(table_name="Memoria_usuario", db_file=db_file)
    )

# Cria√ß√£o do agente principal que ir√° analisar as campanhas dos clientes semnalmente e ir√° ajudar na estrutura√ß√£o dos relat√≥rio nas sprints
sql_agent = Agent(
    tools = [SQLTools(db_url=db_url)],
    model= OpenAIChat(id="gpt-4.1-mini"),
    num_history_runs=5,
    add_history_to_messages=True,  
    storage=db_conversations,
    description=dedent("""
                       Voc√™ √© um analista de dados de marketing digital com experi√™ncia em campanhas pagas. Sua tarefa √© realizar o acompanhamento semanal das campanhas de marketing dos clientes, com foco na performance dos criativos.
                            Analise os dados da semana e destaque os criativos com melhor e pior desempenho, considerando o objetivo da campanha.
                            Para cada destaque positivo e negativo, apresente as seguintes m√©tricas:
                            Impress√µes, CPM (Custo por mil impress√µes)
                            Visualiza√ß√µes at√© 100%, CPV (Custo por visualiza√ß√£o)
                            A an√°lise deve considerar o contexto do objetivo da campanha: por exemplo, para campanhas de alcance, o foco deve estar em impress√µes e CPM; para campanhas de visualiza√ß√£o, d√™ mais peso para visualiza√ß√µes 100% e CPV.
                            Evite trazer listas longas: selecione apenas os criativos com performance mais relevante ‚Äî tanto positiva quanto negativa ‚Äî com base nos dados. 
                            A resposta deve ser estruturada por cliente e campanha, destacando o criativo e suas m√©tricas associadas.
                            Fa√ßa:
                            1. üß† Um resumo anal√≠tico da performance (bom/ruim e por qu√™)
                            2. üìä Interpreta√ß√£o dos KPIs principais
                            3. ‚úÖ Recomenda√ß√µes acion√°veis para otimiza√ß√£o                       
                       """),  
    instructions=(
                    "Sempre que precisar consultar dados, utilize a VIEW Metricas, que cont√©m as seguintes colunas:\n"
                    "- Cliente: Nome do cliente respons√°vel pela campanha. Exemplos incluem: Eletrobras, BNDES, CNI, SEBRAE e SEBRAE RJ.\n"
                    "- Campanha: Nome da campanha. Nem todas as campanhas est√£o ativas atualmente.\n"
                    "- Veiculo: Plataforma em que os an√∫ncios foram veiculados, como: Instagram, Facebook, TikTok, Pinterest, LinkedIn, Google Discovery, YouTube, entre outras.\n"
                    "- Data: Data de ocorr√™ncia do registro.\n"
                    "- Impressoes: Quantidade de vezes que o an√∫ncio foi exibido (impress√µes).\n"
                    "- Investimento: Valor investido no an√∫ncio nesse dia espec√≠fico.\n"
                    "- Visualizacoes_ate_100: N√∫mero de visualiza√ß√µes que chegaram at√© o fim do v√≠deo (100%).\n"
                    "- Video_Play: Quantidade de vezes que o v√≠deo foi iniciado.\n"
                    "- Formato: Tipo de formato do criativo, como: Card, Carrossel, Cole√ß√£o, Discovery, Est√°tico, Reels, Stories, V√≠deo.\n"
                    "- Criativo: Nome ou identificador do criativo utilizado no an√∫ncio.\n"
                    "- Objetivo: Objetivo da campanha, como: Alcance, Visualiza√ß√£o, Tr√°fego, Engajamento, Considera√ß√£o ou Convers√£o.\n"
                    "- Editoria: Subdivis√£o editorial dentro da campanha.\n"
                    "- Link_do_Anuncio: URL do an√∫ncio correspondente."
                )
)

#analyst_agent = Agent(    model = OpenAIChat(id='gpt_4.1-mini'),    instructions=())

playground_app = Playground(agents=[sql_agent])
app = playground_app.get_app()
if __name__ == "__main__":
    serve_playground_app("Monitor_Campanhas:app", reload=True) 